from aiogram import types
from sqlalchemy import select, update, func

from database.sql import async_session_maker
from database.models.user import User


class UserService:
    
    @staticmethod
    async def is_exist(id: int) -> bool: #–ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ —î —Ç–∞–∫–∏–π —é–∑–µ—Ä –≤ –±–∞–∑—ñ –¥–∞–Ω–Ω–∏—Ö
        async with async_session_maker() as session:
            stmt = select(User).where(User.id == id)
            is_exist = await session.execute(stmt)
            return is_exist.scalar() is not None
        
    @staticmethod
    async def create_user_profile(id : int):
        async with async_session_maker() as session:
            new_user = User(id = id)
            session.add(new_user)
            await session.commit()
    
    @staticmethod
    async def is_user(id: int) -> bool: #–ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á —î –∑–≤–∏—á–∞–π–Ω–∏–º —é–∑–µ—Ä–æ–º
        async with async_session_maker() as session:
            profile_request = select(User).where(User.id == id)
            user = await session.execute(profile_request)
            return user.role == "user"
        

    @staticmethod
    async def get_group(id: int) -> bool: #–∞–∫–∞–∫–¥–µ–º—ñ—á–Ω–∞ –≥—Ä—É–ø–∞ —é–∑–µ—Ä–∞
        async with async_session_maker() as session:
            request_user = select(User).where(User.id == id)
            user = await session.execute(request_user)
            result = user.scalar()
            if result is not None:
                return result.group
            return "issue"
     
    @staticmethod
    async def set_academic_group(id : int, group : str) -> bool: #–≤—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ –∞–∫–∞–¥–µ–º—ñ—á–Ω—É –≥—Ä—É–ø—É
        async with async_session_maker() as session:
            new_group = update(User).where(User.id == id).values(group = group)
            await session.execute(new_group)
            await session.commit()
    

    @staticmethod
    async def formulate_profile_text(id : int):
        async with async_session_maker() as session:
            request_profile = select(User).where(User.id == id)
            user = await session.execute(request_profile)
            user = user.scalar()

            text = f"–í–∞—à –ø—Ä–æ—Ñ—ñ–ª—å:\nü§† –ê–∫–∞–¥–µ–º—ñ—á–Ω–∞ –≥—Ä—É–ø–∞: {user.group}"

            if user.is_senior_student:
                text += f"\nüèÖ –°—Ç–∞—Ä–æ—Å—Ç–∞ –≥—Ä—É–ø–∏ {user.group}"
            if user.is_member_buro:
                text += f"\nüê± –£—á–∞—Å–Ω–∏–∫ –ø—Ä–æ—Ñ–±—é—Ä–æ"
            
            return text
        
